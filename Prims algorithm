 """ prims algorithm"""

        def prim_mst(G):
                for u in nodes ():
                        node[u]['dissto']=float("inf")#key stores in the prime key
                        node[u]['heap']=None #heap pointer to nodes HeapItem
                parent ={}

                heap = makeheap ([])
                v = nodes () [0]
                #go through v in order of closest to current tree

                while v!=None :
                        node[v] ['dissto'] = float ("-inf") #vertices now in the tree

                        snapshot_mst(G,parent)

                        #update the estimate distance to each of v in neighbours

                        for w in neighbours (v):
                                #if the new length is smaller than then the old length, update

                                if G(v) [w] ['length'] <node [w] ['distto']:

                                        #closest tree node to w is v

                                        node[w] ['distto'] = G[v][w]['length']
                                        parent[w]=v

                                        #add to heap or decrease key if already in heap
                                        h=node[w]['heap']
                                        if h is None:
                                                node[w]['heap']=heapinsert(node[w]['distto'],w,heap)
                                        else:
                                                heap_decreasekey(h,node[w]['distto'],heap)

                                                #get the next vertex closet to the tree
                                                v=deletemin(heap)
                                                v=v.item if v is not None else None
                                        return parent
                        
